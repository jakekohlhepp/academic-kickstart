crosswalk<-data.table(da35158.0001)
crosswalk[,OAG_NCIC_CD:=str_trim(as.character(da35158.0001$ORI9))]
crosswalk[,FIPS_COUNTY:=str_trim(paste0(as.character(da35158.0001$FIPS_COUNTY), as.character(da35158.0001$FIPS_ST)))]
crosswalk[,org_name:=str_trim(as.character(da35158.0001$NAME))]
crosswalk<-unique(crosswalk[,c("OAG_NCIC_CD", "FIPS_COUNTY","org_name")])
fuzzymatch<-crosswalk[OAG_NCIC_CD=="-1",]
# remove orgs with no ncic code
crosswalk<-crosswalk[OAG_NCIC_CD!="-1",]
stopifnot(uniqueN(crosswalk$OAG_NCIC_CD)==nrow(crosswalk))
local<-merge(crosswalk, local, by="OAG_NCIC_CD", all.y=TRUE)
unmatched<-local[is.na(FIPS_COUNTY),][, .SD, .SDcols = hold]
local<-local[!is.na(FIPS_COUNTY),]
# of unmatched, try to merge by orgname
unmatched[,org_name:=str_to_upper(OAG_NM)]
attach<-merge(unmatched,fuzzymatch[,-c("OAG_NCIC_CD")], by="org_name")
unmatched<-merge(unmatched,fuzzymatch[,-c("OAG_NCIC_CD")], by="org_name",all.x=TRUE)
unmatched<-unmatched[is.na(FIPS_COUNTY),]
local<-rbind(local, attach)
# then try to extract county from the name itself.
unmatched[,str_county:=str_trim(sub("(COUNTY).+$","COUNTY",org_name  ))]
unmatched[,flag_county:=str_detect(org_name, "COUNTY")]
setorder(unmatched, flag_county, org_name)
# for now just try and match counties.
fips_xwalk<-data.table(fips_codes)
fips_xwalk[,county_code:=paste0(state_code, county_code)]
fips_xwalk<-fips_xwalk[,c("state", "county_code", "county")]
names(fips_xwalk)<-c("NCIC_ST", "FIPS_COUNTY","str_county" )
fips_xwalk[, str_county:=str_to_upper(str_county)]
unmatched[,FIPS_COUNTY:=NULL]
another_bunch<-merge(unmatched, fips_xwalk, by=c("str_county","NCIC_ST"))
local<-rbind(local, another_bunch, fill=TRUE)
unmatched<-merge(unmatched,fips_xwalk, by=c("str_county","NCIC_ST"),all.x=TRUE)
unmatched<-unmatched[is.na(FIPS_COUNTY),]
## merge to get equitable sharing requests
requests<-merge(local[,-c("OAG_NM", "NCIC_ST")],local_dag,by="OAG_NCIC_CD", all.y=TRUE)
## pause: produce sheet of all requests without documented county. note that this is a smaller set than all orgs in unmatched. this is because unmatched includes ALL unmatched orgs, while this contains only orgs with some equitable sharing in the data.
output<-requests[is.na(FIPS_COUNTY), .(count=.N), by=c("OAG_NM", "NCIC_ST")]
setorder(output, -count, OAG_NM)
write.table(output, file="data/counties_manual.csv", row.names=FALSE, col.names=TRUE, sep=",")
updated<-fread("data/counties_manual_withedits.csv")
updated[, county:=str_to_upper(county)]
updated<-updated[!is.na(county) & county!="" & county!="REMOVE" & county!="SPECIAL CASE" & county!="STATE LEVEL",]
setnames(updated, "county", "str_county")
more<-merge(updated,fips_xwalk, by=c("str_county","NCIC_ST"),all.x=TRUE)
stopifnot(nrow(more[is.na(FIPS_COUNTY)])==0)
requests<-merge(requests, more[,c("OAG_NM", "FIPS_COUNTY", "str_county","NCIC_ST")], by=c("NCIC_ST", "OAG_NM"), all.x=TRUE)
requests[is.na(FIPS_COUNTY.x), str_county.x:=str_county.y]
requests[is.na(FIPS_COUNTY.x), FIPS_COUNTY.x:=FIPS_COUNTY.y]
requests[, c("FIPS_COUNTY.y", "str_county.y"):=NULL]
requests<-requests[!is.na(FIPS_COUNTY.x),]
### now collapse to each county that puts in a request for each asset
asset_req<-requests[, .SD[1], by=c("FIPS_COUNTY.x", "NCIC_ST", "ASSET_ID")]
asset_req[, county_:=1]
# how many co-occurences? how many times do counties ask for a share
co_oc<-dcast(asset_req, ASSET_ID ~ FIPS_COUNTY.x, fun.agg = function(x) sum(!is.na(x)), value.var="county_")
setnames(asset_req, "FIPS_COUNTY.x", "FIPS_COUNTY")
## make data-set based on county equitable sharing. this does not have all data.
equ_sharing_seiz<-merge(asset_t, unique(asset_req[,c("ASSET_ID", "FIPS_COUNTY", "NCIC_ST")]), by="ASSET_ID")
#stopifnot(nrow(equ_sharing_seiz)==nrow(unique(asset_req[,"ASSET_ID"]))) ## this merge only limits the asset list.
requests[,state_agency:=substring(OAG_NCIC_CD,1,2 )]
## make another based on state. use state of seizure, count all seizures which are associated with an equitable sharing request.
NCIC_statelocal_only<-NCIC_CD_L[NCIC_AGCY_TYP!="F" & NCIC_AGCY_TYP!="O", ]
NCIC_statelocal_only<-NCIC_statelocal_only[str_trim(NCIC_GRP_ID)=="",]
NCIC_statelocal_only<-NCIC_statelocal_only[,OAG_NCIC_CD:=str_trim(OAG_NCIC_CD)]
statelocal_dag<-merge(dag71_T,NCIC_statelocal_only[,c("OAG_NCIC_CD", "OAG_NM", "NCIC_ST")], by="OAG_NCIC_CD")
statelevel_equi_sharing<-merge(asset_t, statelocal_dag[,"ASSET_ID"], by="ASSET_ID")
## at this point we have collap
library('data.table')
library('ggplot2')
library('lubridate')
library('prettyR')
library('stringr')
library('tidycensus')
memory.limit(20000)
## process raw data from CATS - only equitable sharing.
# merge together pieces using this procedure http://ij.org/wp-content/uploads/2015/11/ES-CATS-Procedures2.pdf
setwd('C:/Users/jakek/Google Drive/Working Documents/econ_phd/civil_asset_forfeiture/mkdata/')
asset_t<-fread('raw/foiaCATS_20200704/ASSET_T_20200704.txt')
dag71_T<-fread('raw/foiaCATS_20200704/DAG71_T.txt')
dag71_T<-dag71_T[,OAG_NCIC_CD:=str_trim(OAG_NCIC_CD)]
NCIC_CD_L<-fread('raw/foiaCATS_20200704/NCIC_CD_L.txt')
NCIC_CD_L<-NCIC_CD_L[,OAG_NCIC_CD:=str_trim(OAG_NCIC_CD)]
# limit to local
temp<-merge(dag71_T,NCIC_CD_L, by="OAG_NCIC_CD")
stopifnot(nrow(dag71_T)==nrow(temp))
rm(temp)
NCIC_local_only<-NCIC_CD_L[NCIC_AGCY_TYP=="L", ]
NCIC_local_only<-NCIC_local_only[str_trim(NCIC_GRP_ID)=="",]
NCIC_local_only<-NCIC_local_only[,OAG_NCIC_CD:=str_trim(OAG_NCIC_CD)]
local_dag<-merge(dag71_T,NCIC_local_only[,c("OAG_NCIC_CD", "OAG_NM", "NCIC_ST")], by="OAG_NCIC_CD")
local<-copy(NCIC_local_only)
colnames(local)->hold
# crosswalk of ncic codes: https://www.icpsr.umich.edu/web/NACJD/studies/35158#
load(file="raw/ICPSR_35158/DS0001/35158-0001-Data.rda")
crosswalk<-data.table(da35158.0001)
crosswalk[,OAG_NCIC_CD:=str_trim(as.character(da35158.0001$ORI9))]
crosswalk[,FIPS_COUNTY:=str_trim(paste0(as.character(da35158.0001$FIPS_COUNTY), as.character(da35158.0001$FIPS_ST)))]
crosswalk[,org_name:=str_trim(as.character(da35158.0001$NAME))]
crosswalk<-unique(crosswalk[,c("OAG_NCIC_CD", "FIPS_COUNTY","org_name")])
fuzzymatch<-crosswalk[OAG_NCIC_CD=="-1",]
# remove orgs with no ncic code
crosswalk<-crosswalk[OAG_NCIC_CD!="-1",]
stopifnot(uniqueN(crosswalk$OAG_NCIC_CD)==nrow(crosswalk))
local<-merge(crosswalk, local, by="OAG_NCIC_CD", all.y=TRUE)
unmatched<-local[is.na(FIPS_COUNTY),][, .SD, .SDcols = hold]
local<-local[!is.na(FIPS_COUNTY),]
# of unmatched, try to merge by orgname
unmatched[,org_name:=str_to_upper(OAG_NM)]
attach<-merge(unmatched,fuzzymatch[,-c("OAG_NCIC_CD")], by="org_name")
unmatched<-merge(unmatched,fuzzymatch[,-c("OAG_NCIC_CD")], by="org_name",all.x=TRUE)
unmatched<-unmatched[is.na(FIPS_COUNTY),]
local<-rbind(local, attach)
# then try to extract county from the name itself.
unmatched[,str_county:=str_trim(sub("(COUNTY).+$","COUNTY",org_name  ))]
unmatched[,flag_county:=str_detect(org_name, "COUNTY")]
setorder(unmatched, flag_county, org_name)
# for now just try and match counties.
fips_xwalk<-data.table(fips_codes)
fips_xwalk[,county_code:=paste0(state_code, county_code)]
fips_xwalk<-fips_xwalk[,c("state", "county_code", "county")]
names(fips_xwalk)<-c("NCIC_ST", "FIPS_COUNTY","str_county" )
fips_xwalk[, str_county:=str_to_upper(str_county)]
unmatched[,FIPS_COUNTY:=NULL]
another_bunch<-merge(unmatched, fips_xwalk, by=c("str_county","NCIC_ST"))
local<-rbind(local, another_bunch, fill=TRUE)
unmatched<-merge(unmatched,fips_xwalk, by=c("str_county","NCIC_ST"),all.x=TRUE)
unmatched<-unmatched[is.na(FIPS_COUNTY),]
## merge to get equitable sharing requests
requests<-merge(local[,-c("OAG_NM", "NCIC_ST")],local_dag,by="OAG_NCIC_CD", all.y=TRUE)
## pause: produce sheet of all requests without documented county. note that this is a smaller set than all orgs in unmatched. this is because unmatched includes ALL unmatched orgs, while this contains only orgs with some equitable sharing in the data.
output<-requests[is.na(FIPS_COUNTY), .(count=.N), by=c("OAG_NM", "NCIC_ST")]
setorder(output, -count, OAG_NM)
write.table(output, file="data/counties_manual.csv", row.names=FALSE, col.names=TRUE, sep=",")
updated<-fread("data/counties_manual_withedits.csv")
updated[, county:=str_to_upper(county)]
updated<-updated[!is.na(county) & county!="" & county!="REMOVE" & county!="SPECIAL CASE" & county!="STATE LEVEL",]
setnames(updated, "county", "str_county")
more<-merge(updated,fips_xwalk, by=c("str_county","NCIC_ST"),all.x=TRUE)
stopifnot(nrow(more[is.na(FIPS_COUNTY)])==0)
requests<-merge(requests, more[,c("OAG_NM", "FIPS_COUNTY", "str_county","NCIC_ST")], by=c("NCIC_ST", "OAG_NM"), all.x=TRUE)
requests[is.na(FIPS_COUNTY.x), str_county.x:=str_county.y]
requests[is.na(FIPS_COUNTY.x), FIPS_COUNTY.x:=FIPS_COUNTY.y]
requests[, c("FIPS_COUNTY.y", "str_county.y"):=NULL]
requests<-requests[!is.na(FIPS_COUNTY.x),]
### now collapse to each county that puts in a request for each asset
asset_req<-requests[, .SD[1], by=c("FIPS_COUNTY.x", "NCIC_ST", "ASSET_ID")]
asset_req[, county_:=1]
# how many co-occurences? how many times do counties ask for a share
co_oc<-dcast(asset_req, ASSET_ID ~ FIPS_COUNTY.x, fun.agg = function(x) sum(!is.na(x)), value.var="county_")
setnames(asset_req, "FIPS_COUNTY.x", "FIPS_COUNTY")
## make data-set based on county equitable sharing. this does not have all data.
equ_sharing_seiz<-merge(asset_t, unique(asset_req[,c("ASSET_ID", "FIPS_COUNTY", "NCIC_ST")]), by="ASSET_ID")
#stopifnot(nrow(equ_sharing_seiz)==nrow(unique(asset_req[,"ASSET_ID"]))) ## this merge only limits the asset list.
requests[,state_agency:=substring(OAG_NCIC_CD,1,2 )]
## make another based on state. use state of seizure, count all seizures which are associated with an equitable sharing request.
NCIC_statelocal_only<-NCIC_CD_L[NCIC_AGCY_TYP!="F" & NCIC_AGCY_TYP!="O", ]
NCIC_statelocal_only<-NCIC_statelocal_only[str_trim(NCIC_GRP_ID)=="",]
NCIC_statelocal_only<-NCIC_statelocal_only[,OAG_NCIC_CD:=str_trim(OAG_NCIC_CD)]
statelocal_dag<-merge(dag71_T,NCIC_statelocal_only[,c("OAG_NCIC_CD", "OAG_NM", "NCIC_ST")], by="OAG_NCIC_CD")
statelevel_equi_sharing<-merge(asset_t, statelocal_dag[,"ASSET_ID"], by="ASSET_ID")
nrow(statelevel_equi_sharing)
NCIC_statelocal_only<-NCIC_CD_L[NCIC_AGCY_TYP!="F" & NCIC_AGCY_TYP!="O", ]
NCIC_statelocal_only<-NCIC_statelocal_only[str_trim(NCIC_GRP_ID)=="",]
NCIC_statelocal_only<-NCIC_statelocal_only[,OAG_NCIC_CD:=str_trim(OAG_NCIC_CD)]
statelocal_dag<-merge(dag71_T,NCIC_statelocal_only[,c("OAG_NCIC_CD", "OAG_NM", "NCIC_ST")], by="OAG_NCIC_CD")
statelevel_equi_sharing<-merge(asset_t, unique(statelocal_dag[,"ASSET_ID"]), by="ASSET_ID")
for (v in names(statelevel_equi_sharing)[grep("_DT", names(statelevel_equi_sharing))]){
statelevel_equi_sharing[,tempdate:=ymd(get(v))]
statelevel_equi_sharing[,eval(v):=NULL]
statelevel_equi_sharing[,eval(v):=tempdate]
statelevel_equi_sharing[,tempdate:=NULL]
}
statelevel_equi_sharing[, count:=.N, by="ASSET_ID"]
stopifnot(all(statelevel_equi_sharing$count==1))
statelevel_equi_sharing[, count:=NULL]
# some calendar bins
statelevel_equi_sharing[, cal_month:=month(SZ_DT)]
statelevel_equi_sharing[,sz_year:=year(SZ_DT)]
statelevel_equi_sharing[, month_year:=sz_year+cal_month/100]
statelevel_equi_sharing
nrow(equ_sharing_seiz)
uniqueN(equ_sharing_seiz[,ASSET_ID])
temp<-merge(dag71_T, NCIC_CD_L,by="OAG_NCIC_CD")
temp
unqieN(temp[,ASSET_ID])
uniqueN(temp[,ASSET_ID])
table(temp[,NCIC_AGCY_TYP])
nrow(asset_t)
uniqueN(equ_sharing_seiz[,ASSET_ID])
library('data.table')
library('ggplot2')
library('lubridate')
library('prettyR')
library('stringr')
library('tidycensus')
memory.limit(20000)
## process raw data from CATS - only equitable sharing.
# merge together pieces using this procedure http://ij.org/wp-content/uploads/2015/11/ES-CATS-Procedures2.pdf
setwd('C:/Users/jakek/Google Drive/Working Documents/econ_phd/civil_asset_forfeiture/mkdata/')
asset_t<-fread('raw/foiaCATS_20200704/ASSET_T_20200704.txt')
dag71_T<-fread('raw/foiaCATS_20200704/DAG71_T.txt')
dag71_T<-dag71_T[,OAG_NCIC_CD:=str_trim(OAG_NCIC_CD)]
NCIC_CD_L<-fread('raw/foiaCATS_20200704/NCIC_CD_L.txt')
NCIC_CD_L<-NCIC_CD_L[,OAG_NCIC_CD:=str_trim(OAG_NCIC_CD)]
# limit to local
temp<-merge(dag71_T,NCIC_CD_L, by="OAG_NCIC_CD")
stopifnot(nrow(dag71_T)==nrow(temp))
rm(temp)
NCIC_local_only<-NCIC_CD_L[NCIC_AGCY_TYP=="L", ]
NCIC_local_only<-NCIC_local_only[str_trim(NCIC_GRP_ID)=="",]
NCIC_local_only<-NCIC_local_only[,OAG_NCIC_CD:=str_trim(OAG_NCIC_CD)]
local_dag<-merge(dag71_T,NCIC_local_only[,c("OAG_NCIC_CD", "OAG_NM", "NCIC_ST")], by="OAG_NCIC_CD")
local<-copy(NCIC_local_only)
colnames(local)->hold
# crosswalk of ncic codes: https://www.icpsr.umich.edu/web/NACJD/studies/35158#
load(file="raw/ICPSR_35158/DS0001/35158-0001-Data.rda")
crosswalk<-data.table(da35158.0001)
crosswalk[,OAG_NCIC_CD:=str_trim(as.character(da35158.0001$ORI9))]
crosswalk[,FIPS_COUNTY:=str_trim(paste0(as.character(da35158.0001$FIPS_COUNTY), as.character(da35158.0001$FIPS_ST)))]
crosswalk[,org_name:=str_trim(as.character(da35158.0001$NAME))]
crosswalk<-unique(crosswalk[,c("OAG_NCIC_CD", "FIPS_COUNTY","org_name")])
fuzzymatch<-crosswalk[OAG_NCIC_CD=="-1",]
# remove orgs with no ncic code
crosswalk<-crosswalk[OAG_NCIC_CD!="-1",]
stopifnot(uniqueN(crosswalk$OAG_NCIC_CD)==nrow(crosswalk))
local<-merge(crosswalk, local, by="OAG_NCIC_CD", all.y=TRUE)
unmatched<-local[is.na(FIPS_COUNTY),][, .SD, .SDcols = hold]
local<-local[!is.na(FIPS_COUNTY),]
# of unmatched, try to merge by orgname
unmatched[,org_name:=str_to_upper(OAG_NM)]
attach<-merge(unmatched,fuzzymatch[,-c("OAG_NCIC_CD")], by="org_name")
unmatched<-merge(unmatched,fuzzymatch[,-c("OAG_NCIC_CD")], by="org_name",all.x=TRUE)
unmatched<-unmatched[is.na(FIPS_COUNTY),]
local<-rbind(local, attach)
# then try to extract county from the name itself.
unmatched[,str_county:=str_trim(sub("(COUNTY).+$","COUNTY",org_name  ))]
unmatched[,flag_county:=str_detect(org_name, "COUNTY")]
setorder(unmatched, flag_county, org_name)
# for now just try and match counties.
fips_xwalk<-data.table(fips_codes)
fips_xwalk[,county_code:=paste0(state_code, county_code)]
fips_xwalk<-fips_xwalk[,c("state", "county_code", "county")]
names(fips_xwalk)<-c("NCIC_ST", "FIPS_COUNTY","str_county" )
fips_xwalk[, str_county:=str_to_upper(str_county)]
unmatched[,FIPS_COUNTY:=NULL]
another_bunch<-merge(unmatched, fips_xwalk, by=c("str_county","NCIC_ST"))
local<-rbind(local, another_bunch, fill=TRUE)
unmatched<-merge(unmatched,fips_xwalk, by=c("str_county","NCIC_ST"),all.x=TRUE)
unmatched<-unmatched[is.na(FIPS_COUNTY),]
## merge to get equitable sharing requests
requests<-merge(local[,-c("OAG_NM", "NCIC_ST")],local_dag,by="OAG_NCIC_CD", all.y=TRUE)
## pause: produce sheet of all requests without documented county. note that this is a smaller set than all orgs in unmatched. this is because unmatched includes ALL unmatched orgs, while this contains only orgs with some equitable sharing in the data.
output<-requests[is.na(FIPS_COUNTY), .(count=.N), by=c("OAG_NM", "NCIC_ST")]
setorder(output, -count, OAG_NM)
write.table(output, file="data/counties_manual.csv", row.names=FALSE, col.names=TRUE, sep=",")
updated<-fread("data/counties_manual_withedits.csv")
updated[, county:=str_to_upper(county)]
updated<-updated[!is.na(county) & county!="" & county!="REMOVE" & county!="SPECIAL CASE" & county!="STATE LEVEL",]
setnames(updated, "county", "str_county")
more<-merge(updated,fips_xwalk, by=c("str_county","NCIC_ST"),all.x=TRUE)
stopifnot(nrow(more[is.na(FIPS_COUNTY)])==0)
requests<-merge(requests, more[,c("OAG_NM", "FIPS_COUNTY", "str_county","NCIC_ST")], by=c("NCIC_ST", "OAG_NM"), all.x=TRUE)
requests[is.na(FIPS_COUNTY.x), str_county.x:=str_county.y]
requests[is.na(FIPS_COUNTY.x), FIPS_COUNTY.x:=FIPS_COUNTY.y]
requests[, c("FIPS_COUNTY.y", "str_county.y"):=NULL]
requests<-requests[!is.na(FIPS_COUNTY.x),]
### now collapse to each county that puts in a request for each asset
asset_req<-requests[, .SD[1], by=c("FIPS_COUNTY.x", "NCIC_ST", "ASSET_ID")]
asset_req[, county_:=1]
# how many co-occurences? how many times do counties ask for a share
co_oc<-dcast(asset_req, ASSET_ID ~ FIPS_COUNTY.x, fun.agg = function(x) sum(!is.na(x)), value.var="county_")
setnames(asset_req, "FIPS_COUNTY.x", "FIPS_COUNTY")
## make data-set based on county equitable sharing. this does not have all data.
equ_sharing_seiz<-merge(asset_t, unique(asset_req[,c("ASSET_ID", "FIPS_COUNTY", "NCIC_ST")]), by="ASSET_ID")
#stopifnot(nrow(equ_sharing_seiz)==nrow(unique(asset_req[,"ASSET_ID"]))) ## this merge only limits the asset list.
requests[,state_agency:=substring(OAG_NCIC_CD,1,2 )]
for (v in names(equ_sharing_seiz)[grep("_DT", names(equ_sharing_seiz))]){
equ_sharing_seiz[,tempdate:=ymd(get(v))]
equ_sharing_seiz[,eval(v):=NULL]
equ_sharing_seiz[,eval(v):=tempdate]
equ_sharing_seiz[,tempdate:=NULL]
}
# check unique id
equ_sharing_seiz[, count:=.N, by="ASSET_ID"]
#stopifnot(all(equ_sharing_seiz$count==1))
equ_sharing_seiz[, count:=NULL]
# some calendar bins
equ_sharing_seiz[, cal_month:=month(SZ_DT)]
equ_sharing_seiz[,sz_year:=year(SZ_DT)]
equ_sharing_seiz[, month_year:=sz_year+cal_month/100]
## visual plot of date distributions
# by year - count
hist_year<-ggplot(equ_sharing_seiz[!is.na(sz_year),], aes(x=sz_year))+
geom_histogram(color="darkblue", fill="lightblue", bins=25)+
theme_minimal()
# values - plot using log base10 because of skew. this excludes 0 value items.
hist_value<-ggplot(equ_sharing_seiz, aes(x=log10(ASSET_VAL_AT_SZ)))+geom_histogram(aes(y=..density..),color="black", fill="white")
equ_sharing_seiz[,FIPS_COUNTY:=as.numeric(FIPS_COUNTY)]
saveRDS(equ_sharing_seiz, file="data/equitable_sharing_2020_07_04")
#### now make panel of equitable sharing requests
max_month<-max(equ_sharing_seiz$month_year, na.rm=TRUE)
# make entry for every county every month until 2021
county_all<-fips_xwalk[rep(seq_len(nrow(fips_xwalk)), each=11),c("FIPS_COUNTY", "NCIC_ST")]
county_all[, sz_year:=rep(2010:2020,nrow(fips_xwalk))]
county_all<-county_all[rep(seq_len(nrow(county_all)), each=12),]
setorder(county_all, NCIC_ST,FIPS_COUNTY, sz_year)
county_all[, month:=rep(1:12,11*nrow(fips_xwalk))][, month_year:=sz_year+month/100]
county_all<-county_all[month_year<=max_month,]
county_all[,FIPS_COUNTY:=as.numeric(FIPS_COUNTY)]
# collapse equitable sharing requests to count per county.
requests_month<-equ_sharing_seiz[,.(count_requests=.N), by=c("FIPS_COUNTY", "month_year", "NCIC_ST")]
county_requests_panel<-merge(county_all, requests_month, all.x=TRUE, by=c("NCIC_ST", "FIPS_COUNTY", "month_year"))
county_requests_panel[,count_requests:=ifelse(is.na(count_requests), 0,count_requests)]
saveRDS(county_requests_panel, file="data/equitable_sharing_county_panel")
NCIC_statelocal_only<-NCIC_CD_L[NCIC_AGCY_TYP!="F" & NCIC_AGCY_TYP!="O", ]
NCIC_statelocal_only<-NCIC_statelocal_only[str_trim(NCIC_GRP_ID)=="",]
NCIC_statelocal_only<-NCIC_statelocal_only[,OAG_NCIC_CD:=str_trim(OAG_NCIC_CD)]
statelocal_dag<-merge(dag71_T,NCIC_statelocal_only[,c("OAG_NCIC_CD", "OAG_NM", "NCIC_ST")], by="OAG_NCIC_CD")
statelevel_equi_sharing<-merge(asset_t, unique(statelocal_dag[,"ASSET_ID"]), by="ASSET_ID")
for (v in names(statelevel_equi_sharing)[grep("_DT", names(statelevel_equi_sharing))]){
statelevel_equi_sharing[,tempdate:=ymd(get(v))]
statelevel_equi_sharing[,eval(v):=NULL]
statelevel_equi_sharing[,eval(v):=tempdate]
statelevel_equi_sharing[,tempdate:=NULL]
}
# check unique id
statelevel_equi_sharing[, count:=.N, by="ASSET_ID"]
stopifnot(all(statelevel_equi_sharing$count==1))
statelevel_equi_sharing[, count:=NULL]
# some calendar bins
statelevel_equi_sharing[, cal_month:=month(SZ_DT)]
statelevel_equi_sharing[,sz_year:=year(SZ_DT)]
statelevel_equi_sharing[, month_year:=sz_year+cal_month/100]
# make entry for every state every month until 2021
state_all<-fips_xwalk[rep(seq_len(nrow(fips_xwalk)), each=11),c("NCIC_ST")]
state_all[, sz_year:=rep(2010:2020,nrow(fips_xwalk))]
state_all<-state_all[rep(seq_len(nrow(state_all)), each=12),]
setorder(state_all, NCIC_ST, sz_year)
state_all[, month:=rep(1:12,11*nrow(fips_xwalk))][, month_year:=sz_year+month/100]
state_all<-state_all[month_year<=max_month,]
state_all[,FIPS_COUNTY:=as.numeric(FIPS_COUNTY)]
state_all
state_month<-statelevel_equi_sharing[,.(count_requests=.N), by=c("month_year", "NCIC_ST")]
state_month<-merge(state_all, state_month, all.x=TRUE, by=c("NCIC_ST","month_year"))
state_month[,count_requests:=ifelse(is.na(count_requests), 0,count_requests)]
state_all<-fips_xwalk[rep(seq_len(nrow(fips_xwalk)), each=11),c("NCIC_ST")]
setnames(state_all, "NCIC_ST", "sz_state")
state_all[, sz_year:=rep(2010:2020,nrow(fips_xwalk))]
state_all<-state_all[rep(seq_len(nrow(state_all)), each=12),]
setorder(state_all, sz_state, sz_year)
state_all[, month:=rep(1:12,11*nrow(fips_xwalk))][, month_year:=sz_year+month/100]
state_all<-state_all[month_year<=max_month,]
state_month<-statelevel_equi_sharing[,.(count_requests=.N), by=c("month_year", "sz_state")]
statelevel_equi_sharing$SZ_ST
county_bankrupt
county_bankrupt<-readRDS("data/bankruptcy_20201204")
county_bankrupt
county_bankrupt[,length:=str_length(as.character(FIPS_COUNTY))]
table(county_bankrupt$length)
bankrupt<- fread(file= "raw/bankruptcy_20201204/cpbank08on.txt",
nrow=2, nThread=2)
bankrupt
bankrupt$D1CNTY
county_bankrupt[,bankrupt_state:=ifelse(str_length(as.character(D1CNTY)==4,substr(as.character(D1CNTY),1,1),substr(as.character(D1CNTY),1,2)))]
county_bankrupt[,bankrupt_state:=ifelse(str_length(as.character(D1CNTY))==4,substr(as.character(D1CNTY),1,1),substr(as.character(D1CNTY),1,2))]
county_bankrupt[,bankrupt_state:=ifelse(str_length(as.character(FIPS_COUNTY))==4,substr(as.character(FIPS_COUNTY),1,1),substr(as.character(FIPS_COUNTY),1,2))]
county_bankrupt
unique(county_bankrupt$bankrupt_state)
county_bankrupt[,bankrupt_state:=as.numeric(ifelse(str_length(as.character(FIPS_COUNTY))==4,substr(as.character(FIPS_COUNTY),1,1),substr(as.character(FIPS_COUNTY),1,2)))]
county_bankrupt
unique(county_bankrupt$bankrupt_state)
table(county_bankrupt$bankrupt_state)
uniqueN(county_bankrupt$bankrupt_state)
source('C:/Users/jakek/Google Drive/Working Documents/econ_phd/civil_asset_forfeiture/mkdata/mk_bankruptcy.R')
county_bankrupt[,bankrupt_state:=as.numeric(ifelse(str_length(as.character(D1CNTY))==4,substr(as.character(D1CNTY),1,1),substr(as.character(D1CNTY),1,2)))]
saveRDS(county_bankrupt, file="data/bankruptcy_20201204")
state_bankrupt<-county_bankrupt[,.(bkrpt_cnt=sum(bkrpt_cnt)), by="bankrupt_state"]
state_bankrupt
state_bankrupt<-county_bankrupt[,.(bkrpt_cnt=sum(bkrpt_cnt)), by=c("bankrupt_state", "month_year")]
state_bankrupt$month_year
state_bankrupt[bankrupt_state==35 & month_year>=2015.07, policy:=1]
state_bankrupt[bankrupt_state==35 & month_year<=2015.07, policy:=0]
state_bankrupt[bankrupt_state==4, policy:=0]
lm(state_bankrupt, bkrpt_cnt ~ policy)
lm(data=state_bankrupt, bkrpt_cnt ~ policy)
summary(lm(data=state_bankrupt, bkrpt_cnt ~ policy))
state_bankrupt[bankrupt_state==35 & month_year>=2015.07, policy:=1]
state_bankrupt[bankrupt_state==35 & month_year<=2015.07, policy:=0]
state_bankrupt[bankrupt_state==48, policy:=0]
summary(lm(data=state_bankrupt, bkrpt_cnt ~ policy))
ggplot(data=state_bankrupt, aes(month_year bkrpt_cnt))+geom_line(aes(color="state_bankrupt"))
ggplot(data=state_bankrupt, aes(month_year, bkrpt_cnt))+geom_line(aes(color="state_bankrupt"))
ggplot(data=state_bankrupt, aes(month_year, bkrpt_cnt))+geom_line(aes(color=factor(state_bankrupt)))
ggplot(data=state_bankrupt, aes(month_year, bkrpt_cnt))+geom_line(aes(color=state_bankrupt))
ggplot(data=state_bankrupt, aes(month_year, bkrpt_cnt))+geom_line(aes(color=bankrupt_state))
ggplot(data=state_bankrupt, aes(month_year, bkrpt_cnt))+geom_line(aes(color=factor(bankrupt_state)))
ggplot(data=state_bankrupt[bankrupt_state %in% c(4,35,48)], aes(month_year, bkrpt_cnt))+geom_line(aes(color=factor(bankrupt_state)))
summary(lm(data=state_bankrupt, bkrpt_cnt ~ policy+factor(bankrupt_state)))
summary(lm(data=state_bankrupt, bkrpt_cnt ~ policy+factor(bankrupt_state)+factor(month_year)))
source('C:/Users/jakek/Google Drive/Working Documents/econ_phd/civil_asset_forfeiture/analysis/01_01_prelim_regs.R')
summary(model, se="cluster")
model<-feols(bkrpt_cnt~ count_requests | FIPS_COUNTY+month_year ,panel)
summary(model, se="cluster")
ggplot(data=panel[FIPS_COUNTY %in% c(6037)], aes(month_year, count_requests))+geom_line(aes(color=factor(FIPS_COUNTY)))
ggplot(data=panel[FIPS_COUNTY %in% c(6037,6065,6083)], aes(month_year, count_requests))+geom_line(aes(color=factor(FIPS_COUNTY)))
ggplot(data=panel[FIPS_COUNTY %in% c(6037,6065,6073)], aes(month_year, count_requests))+geom_line(aes(color=factor(FIPS_COUNTY)))
ggplot(data=panel[FIPS_COUNTY %in% c(6037,6065,6073,6075)], aes(month_year, count_requests))+geom_line(aes(color=factor(FIPS_COUNTY)))
ggplot(data=panel[FIPS_COUNTY %in% c(6037,6065,6073,6111)], aes(month_year, count_requests))+geom_line(aes(color=factor(FIPS_COUNTY)))
ggplot(data=panel[FIPS_COUNTY %in% c(6037,6065,6073,6067)], aes(month_year, count_requests))+geom_line(aes(color=factor(FIPS_COUNTY)))
panel[, std:=(count_requests-mean(count_requests))/sd(count_requests), by="FIPS_COUNTY"]
ggplot(data=panel[FIPS_COUNTY %in% c(6037,6065,6073,6067)], aes(month_year, std))+geom_line(aes(color=factor(FIPS_COUNTY)))
ggplot(data=panel[FIPS_COUNTY %in% c(6037,6065,6073,6067)], aes(month_year, std))+geom_smooth(aes(color=factor(FIPS_COUNTY)))
ggplot(data=panel[FIPS_COUNTY %in% c(6037,6065,6073,6075)], aes(month_year, std))+geom_smooth(aes(color=factor(FIPS_COUNTY)))
ggplot(data=panel[FIPS_COUNTY %in% c(6037,6065,6073,6079)], aes(month_year, std))+geom_smooth(aes(color=factor(FIPS_COUNTY)))
ggplot(data=panel[FIPS_COUNTY %in% c(6037,6065,6073,6103)], aes(month_year, std))+geom_smooth(aes(color=factor(FIPS_COUNTY)))
ggplot(data=panel[FIPS_COUNTY %in% c(6037,6065,6073,6043)], aes(month_year, std))+geom_smooth(aes(color=factor(FIPS_COUNTY)))
ggplot(data=panel[FIPS_COUNTY %in% c(6037,6065,6073,6111)], aes(month_year, std))+geom_smooth(aes(color=factor(FIPS_COUNTY)))
ggplot(data=panel[FIPS_COUNTY %in% c(6037,6065,6073,6087)], aes(month_year, std))+geom_smooth(aes(color=factor(FIPS_COUNTY)))
ggplot(data=panel[FIPS_COUNTY %in% c(6037,6065,6073,6071)], aes(month_year, std))+geom_smooth(aes(color=factor(FIPS_COUNTY)))
setwd('C:/Users/jakek/Google Drive/Working Documents/econ_phd/civil_asset_forfeiture/mkdata/')
asset_t<-fread('raw/foiaCATS_20201003/ASSET_T_20200704.txt')
dag71_T<-fread('raw/foiaCATS_20201003/DAG71_T.txt')
dag71_T<-dag71_T[,OAG_NCIC_CD:=str_trim(OAG_NCIC_CD)]
NCIC_CD_L<-fread('raw/foiaCATS_20201003/NCIC_CD_L.txt')
NCIC_CD_L<-NCIC_CD_L[,OAG_NCIC_CD:=str_trim(OAG_NCIC_CD)]
asset_t<-fread('raw/foiaCATS_20201003/ASSET_T.txt')
dag71_T$SHR_EXEC_STS_CD
table(dag71_T$SHR_EXEC_STS_CD)
asset_t$ASSET_VAL
summary(asset_t$ASSET_VAL)
quantile(asset_t$ASSET_VAL)
quantile(asset_t$ASSET_VAL, seq(by=0.01, from=0, to=1))
DISPINST_T<-fread('raw/foiaCATS_20201003/DISPINST_T.txt')
DISPINST_T$OFC_ID
uniqueN(DISPINST_T$SUB_OFC_ID)
uniqueN(DISPINST_T$SUB_OFC)
uniqueN(DISPINST_T$OFC_ID)
uniqueN(DISPINST_T[,c("OFC_ID", "SUB_OFC_ID")])
nrow(DISPINST_T[,c("OFC_ID", "SUB_OFC_ID")])
DAGRPCT_T<-fread('raw/foiaCATS_20201003/DAGRPCT_T.txt')
DAGRPCT_T$SHR_DCSN_CLS_CD
DAGRPCT_T$SHR_RCMD_PCT
DAGRPCT_T$SHR_ACTN_SRC
dag71_T$FORM_TYP
table(dag71_T$FORM_TYP)
table(dag71_T[, .(count=.N), by=c("FORM_TYP", "APRVl_DT")]
)
dag71_T[, .(count=.N), by=c("FORM_TYP", "APRVl_DT")]->temp
dag71_T[, .(count=.N), by=c("FORM_TYP", "APRVL_DT")]->temp
temp
setorder(temp, APRVL_DT)
temp
library('data.table')
library('ggplot2')
library('lubridate')
library('magick')
library('plm')
library('panelvar')
library('gglorenz')
library('stringr')
library('knitr')
library('gganimate')
library('DT')
library('plotly')
library('kableExtra')
library('quanteda')
library("rtweet")
library('tidytext')
library('zoo')
set.seed(34777)
knitr::opts_chunk$set(warning=FALSE, message=FALSE)
setwd('C:/Users/jakek/Documents/econ_phd/BLVD_project/consulting_analysis')
library('data.table')
library('ggplot2')
library('lubridate')
library('magick')
library('plm')
library('panelvar')
library('gglorenz')
library('stringr')
library('knitr')
library('gganimate')
library('DT')
library('plotly')
library('kableExtra')
library('quanteda')
library("rtweet")
library('tidytext')
library('zoo')
set.seed(34777)
knitr::opts_chunk$set(warning=FALSE, message=FALSE)
setwd('/BLVD_project/consulting_analysis')
library('data.table')
library('ggplot2')
library('lubridate')
library('magick')
library('plm')
library('panelvar')
library('gglorenz')
library('stringr')
library('knitr')
library('gganimate')
library('DT')
library('plotly')
library('kableExtra')
library('quanteda')
library("rtweet")
library('tidytext')
library('zoo')
set.seed(34777)
knitr::opts_chunk$set(warning=FALSE, message=FALSE)
setwd('BLVD_project/consulting_analysis')
